{
  "Programming": {
    "Python": "This is the programming language started I learning first, around five years ago. Over this time I've develped a thorough understanding of core concepts such as working with different data types, logic and flow control, raising and handling exceptions, effectively using functions and classes, as well as utilising modules from the standard library and the wider Python ecosystem. Some examples of libraries I'm familiar with are given under the other tabs above.",
    "JavaScript": "A good understanding of Python allowed me to pick up JavaScript with relative ease once the syntax was learned. I now enjoy using JavaScript both in the browser and using Node.js, for web development and to provide a better user experience for my projects. I'm comfortable writing asynchronous programs, using the fetchAPI, and I'm familiar with the newer features implemented in ES5 and ES6.",
    "Bash": "I primarily use distributions based on the Linux operating system. As a result I'm at ease working on the CLI, writing bash scripts, and performing system administration tasks with Bash."
  },
  "Front End": {
      "HTML": "I have no difficulties working with HTML. I know how to implement different elements and I'm able to manipulate the DOM with JavaScript.",
      "CSS": "I've got a good understanding when it comes to using CSS to add styling to websites, but I find it far more convenient compiling from SASS!",
      "SASS": "Finding SASS has been a game changer. I often found styling websites time consuming, but the ease-of-use and powerful functionality SAAS and other CSS pre-processors bring really helps speed up the process.",
      "JavaScript": "A good understanding of Python allowed me to pick up JavaScript with relative ease once the syntax was learned. I now enjoy using JavaScript both in the browser and using node, for web development and to provide a better user experience for my projects. I'm comfortable writing asynchronous programs, using the fetchAPI, and I'm familiar with the newer features implemented in ES5 and ES6.",
      "React": "I've used React to create several single page applications, and even though I've only recently started using React, and I'm not yet fully utilising all of it's functionality, I find using React componenets a great way of seperating concenrs when coding websites.",
      "Jinja": "With a strong background in Python, I find using Jinja intuitive. The ability to create templates and perform logical operations at the front end is very powerful and useful. I find a use for Jinja with the majority of my Flask applications.",
      "AWS Amplify": "I built this website on amplify...Iz gud"
  },
  "Back End": {
      "AWS": "I'm familiar with bulding out backends using core AWS features like API Gateway, DynamoDBs, Lambda functions...",
      "Flask": "I chose to learn Flask as my Python web framework as it's more modular than Django and I read this would be better for learning the fundamentals of web development with Python. I have no regrets with this choice and love using Flask, but I'm eager to give the more 'batteries included' Django a go soon.",
      "Node": "While learning JavaScript I also learned the basics of Node.js, such as using NPM and requiring modules, creating a Node.js server, working with the file system, and performing CRUD operations on databases.",
      "NginX": "My go-to web server.",
      "Gunicorn": "Comfortable using Gunicorn to link between NginX and my Flask apps.",
      "Apache": "I've used this for a number of personal projects which required a server but I now prefer to use NginX for the majority of projects."
  },
  "Data": {
      "SQL": "I can write SQL to store, manipulate and retrieve data in databases. SQLite is usually sufficient for my purposes but I've also had experience using MySQL and Postgres.",
      "NoSQL": "Like DynamoDB",
      "Pandas": "I'm familiar with the Pandas library and can use it to read, explore, manipulate and clean data.",
      "NumPy": "I'm able utilise NumPy effectively when working with large, multi-dimensional arrays. NumPy has been instrumental in several personal projects, especially for machine learning, image manipulation and computer vision tasks.",
      "Matplotlib": "It's my go to tool for fast and powerful data visulisation.",
      "Bokeh": "When I need to create data visulisations that are interactive and can be shared and displayed in the browser, Bokeh is my library of choice.",
      "Chart.js": "When there's no python back-end but I want to implement good looking interactive visulisations, I turn to Chart.js or ReCharts."
  },
  "Version Control": {
      "Git": "I'm confident with basic version control tasks using Git, such as stageing and commiting edits, creating and merging branches, as well as reverting and resetting repositories",
      "Github": "Familiar with using Github for pulling, pushing, forking and cloning repos.",
      "Docker": "I'm able to use Docker for containerization to develop portable, consistent applications in an isolated and predictable environment."
  },
  "Also Familiar With...": {
      "Machine Learning": "I'm particularly interested in this field and I'm well acquainted with popular ML tools like Scikit-Learn, Keras, TensorFlow and Pytorch. I've developed both supervised and unsupervised, and batch and online learning models. I enjoy testing and validating to find optimal models and hyperparameters.",
      "OpenCV": "This is my go-to library for image manipulation and computer vision tasks.",
      "IDE's": "I've used a number of popular integrated development environments over the last few years. Now I mainly use VS Code for editing and debugging but I sometimes use Spyder when I need to perform more in-depth data analysis."
  }
}
